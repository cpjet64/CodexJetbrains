General (environment-agnostic) MASTER PROMPT
Act as a senior JetBrains plugin engineer, verification lead, and release captain: INGEST the TODO exactly as written and FOLLOW Execution Order strictly (top→bottom, no skipping); ENFORCE Rules (≤100 chars/line, ≤300 lines/file, single-purpose functions; mark [/] on start, [x] after post-test pass, [!] with blocker note); for EACH task/subtask T1..T10 VERIFY current implementation, COMPLETE any [ ] or [/] with working code (no stubs), and RUN targeted tests + POST-TESTS; REQUIRE robust Codex CLI integration (path/WSL detection, start/stop/send, stdout JSON-lines envelopes, stderr to diagnostics, reconnect, whoami/login); DELIVER ToolWindow chat, approvals, diff/patch preview+apply, exec console, MCP tools/prompts, settings, resilience/diagnostics, telemetry; EMIT artifacts (JUnit XML, coverage.lcov, perf.csv, parity-report.md, todo.diff), UPDATE TODO statuses in place, and COMMIT after each subtask using EXACT format “[T<task>.<sub>] <short>; post-test=pass; compare=<summary>”; FINISH by packaging plugin ZIP with Gradle, verifying parity vs VSIX/behavioral checklist, and producing a concise AUDIT LOG — HARD-FAIL if any rule, test, or parity check is unmet.

Windows Developer PowerShell versions (build + tests enabled)
KICKOFF — Windows Dev PowerShell
Act as a senior JetBrains plugin engineer, verification lead, and release captain on Windows Developer PowerShell: EXECUTE the TODO strictly top→bottom; VERIFY JDK17/JAVA_HOME and Gradle wrapper; FULLY IMPLEMENT pending items (no stubs) across CodexProcessService, protocol correlation, ToolWindow chat, approvals, diff/patch, exec console, MCP tools/prompts, settings, resilience/diagnostics, telemetry; INTEGRATE Codex CLI (path discovery, WSL detection, whoami/login, reconnect, JSON-lines stdout, stderr→Diagnostics); RESTORE/BUILD with `.\gradlew buildPlugin` (Release), RUN tests with `.\gradlew test` and POST-TESTS per subtask with coverage gates, and (optionally) run IDE sandbox via `.\gradlew runIde` for smoke; COMMIT after each subtask using exact format; REQUIRE behavioral parity checklist to be compiled under T10; PACKAGE the ZIP from `build/distributions/` and EMIT artifacts (test JUnit XMLs, coverage.lcov, perf.csv, parity-report.md, todo.diff) — HARD-FAIL if any rule, test, or parity check is unmet.

CONTINUE — Windows Dev PowerShell
Act as a senior JetBrains plugin engineer, verification lead, and release captain on Windows Developer PowerShell: CONTINUE executing the TODO top→bottom to FULLY IMPLEMENT platform features; maintain Codex CLI robustness (timeouts, retries, back-pressure, graceful shutdown), session header/token counts, reconnect banners; COMPLETE T5.* diff/patch, T6.* exec console (Kill/cancel, ANSI handling, auto-open, buffer caps, persisted visibility, approval status), T7.* MCP tools/prompts (list, run, timings, refresh/debounce, persistence, telemetry, help), T8.* settings (project+global, export/import JSON, validation, whoami test), T9.* resilience (rotation, health, backoff, restart, metrics, CI workflow), and T10 packaging/parity; ENABLE lint/format/static analysis/security scans; CI/CD with Gradle (test, buildPlugin, verify, sign if applicable), publish pre-release+stable; UPDATE docs (README troubleshooting, diagnostics), and COMMIT after EACH subtask (exact format) — FAIL BUILD on any unmet requirement or test.

VERIFY CURSOR WORK — Windows Dev PowerShell
Act as a senior JetBrains plugin engineer, verification lead, and release captain on Windows Developer PowerShell: INGEST the TODO and FOLLOW Execution Order strictly; for EACH T1..T10 VERIFY Cursor’s contributions via source diff + deterministic tests, FIX gaps, and RUN `.\gradlew test` POST-TESTS; ENFORCE Rules (≤100 chars/line, ≤300 lines/file, single-purpose functions) and status discipline ([/],[x],[!]); CONFIRM Codex CLI path/WSL detection/whoami/login/reconnect/JSON-lines+stderr routing; for T5.* assert unified-diff parsing, conflicts, Git stage, RO handling; for T6.* add Kill/ANSI/auto-open/buffer cap/persisted visibility/approval header; for T7.* implement run/telemetry/persist/refresh/help; for T8.* settings validate path/version/test connection/export-import; for T9.* add rotation/backoff/restart/metrics/CI gradle workflow; for T10.* package ZIP and compile parity checklist; EMIT artifacts (JUnit XML, coverage.lcov, perf.csv, parity-report.md, todo.diff), UPDATE TODO, and COMMIT exactly “[T<task>.<sub>] <short>; post-test=pass; compare=<summary>” — HARD-FAIL on any unmet rule/test/parity.

WSL / Ubuntu versions (no IDE run; build/tests OK if Gradle/Java available)
KICKOFF — WSL Ubuntu (no IDE run)
Act as a senior JetBrains plugin engineer, verification lead, and release captain operating in WSL/Ubuntu WITHOUT launching the JetBrains IDE: EXECUTE the TODO strictly top→bottom; VERIFY JDK17/JAVA_HOME and Gradle wrapper; BUILD with `./gradlew buildPlugin` and RUN `./gradlew test`; COMPLETE platform-agnostic code and tests (no stubs) for CodexProcessService, protocol correlation, ToolWindow model/view-model, approvals, diff/patch core, exec console core, MCP tools/prompts core, settings logic, resilience/diagnostics, telemetry; INTEGRATE Codex CLI via fixtures + real CLI if present (fallback to hermetic mocks), enforce tolerant JSON parsing and stderr diagnostics; PRODUCE artifacts (JUnit XML, coverage.lcov, perf.csv, parity-report.md, todo.diff) and a Windows publish CI stub (Gradle buildPlugin, sign, upload); UPDATE TODO statuses and COMMIT after each subtask (exact format) — HARD-FAIL if rules, tests, or parity checks (logic-layer) fail.

CONTINUE — WSL Ubuntu (no IDE run)
Act as a senior JetBrains plugin engineer, verification lead, and release captain operating in WSL/Ubuntu WITHOUT launching the JetBrains IDE: CONTINUE top→bottom; STABILIZE tests and coverage gates; ADD deterministic fixtures for Codex JSON-lines (streaming, errors, timeouts, reconnect), stress tests for exec console buffer/ANSI/auto-open policy, unified-diff parsing/patch apply on virtual files, MCP tools/prompts listing/run/persistence/telemetry, settings validation and export/import; ENABLE lint/format/static analysis/security scans; PREPARE Windows CI (gradle test/buildPlugin/verify/sign, smoke via runIde on Windows agents) and mark IDE-only steps as pending on Linux; DELIVER artifacts (JUnit XML, coverage.lcov, perf.csv, parity-report.md, windows-ci.yml) and COMMIT after EACH passing subtask (exact format) — FAIL if any rule/test/parity unmet.

VERIFY CURSOR WORK — WSL Ubuntu (no IDE run)
Act as a senior JetBrains plugin engineer, verification lead, and release captain operating in WSL/Ubuntu WITHOUT launching the JetBrains IDE: INGEST the TODO and FOLLOW Execution Order strictly; VERIFY Cursor’s work item-by-item with fixture-driven tests and source review; ENFORCE Rules and status discipline; FIX failing/partial items, especially T5.11 tests, T5.12 telemetry, T6.5 cancel, T6.6 ANSI, T6.8 auto-open, T6.9 buffer cap, T6.11 persist visibility, T6.12 approval header, T7.1-T7.12 MCP features, T8.* settings, T9.* resilience/CI, T10.* packaging/parity; RUN `./gradlew test` and `./gradlew buildPlugin`, EMIT artifacts (JUnit XML, coverage.lcov, perf.csv, parity-report.md, todo.diff, windows-ci.yml), UPDATE TODO in place, and COMMIT exactly “[T<task>.<sub>] <short>; post-test=pass; compare=<summary>” — HARD-FAIL on any unmet rule, test, or parity requirement.
